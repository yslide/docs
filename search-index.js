var searchIndex = JSON.parse('{\
"libslide":{"doc":"libslide is the core of slide, implementing the end-to-end…","i":[[3,"StmtList","libslide","A list of statements in a slide program.",null,null],[3,"Span","","Describes the character span of a substring in a text.",null,null],[12,"lo","","Inclusive lower bound index of the span, in terms of…",0,null],[12,"hi","","Exclusive upper bound index of the span, in terms of…",0,null],[3,"ProgramContext","","A context for evaluating a slide program.",null,null],[3,"Poly","","A polynomial in integer space Z. TODO: Currently, this…",null,null],[12,"vec","","Underlying polynomial coefficient representation. The…",1,null],[3,"EmitConfig","","Configuration options for emitting a slide grammar.",null,null],[4,"ExprPat","","A slide expression pattern.",null,null],[13,"Const","","A constant",2,null],[13,"VarPat","","Pattern matching a variable",2,null],[13,"ConstPat","","Pattern matching a constant",2,null],[13,"AnyPat","","Pattern matching any expression",2,null],[13,"BinaryExpr","","A binary expression",2,null],[13,"UnaryExpr","","A unary expression",2,null],[13,"Parend","","A paranthesized expression",2,null],[13,"Bracketed","","A bracketed expression",2,null],[4,"Stmt","","A statement in a slide program.",null,null],[13,"Expr","","An expression statement is a statement that consists…",3,null],[13,"Assignment","","An assignment binds some value to a variable. For example…",3,null],[4,"EmitFormat","","The format in which a slide grammar should be emitted.",null,null],[13,"Pretty","","Canonical, human-readable form. For example, `1+1` is…",4,null],[13,"SExpression","","S-expression form. For example, `1+1` is output as `(+ 1…",4,null],[13,"Latex","","LaTeX output form. For example, `(1 + 1)` is output as…",4,null],[13,"Debug","","Slide internal debug form. NB: this form is not stable,…",4,null],[5,"parse_expression_pattern","","Parses a tokenized slide expression pattern, emitting the…",null,[[["vec",3],["token",3]]]],[5,"parse_statement","","Parses a tokenized slide program, emitting the result and…",null,[[["vec",3],["token",3]]]],[5,"lint_expr_pat","","Lints a slide expression pattern.",null,[[["rcexprpat",3]],[["vec",3],["diagnostic",3]]]],[5,"lint_stmt","","Lints a slide statement list.",null,[[["stmtlist",3]],[["vec",3],["diagnostic",3]]]],[5,"evaluate","","Evaluates a list of statements to as simplified a form as…",null,[[["stmtlist",3],["programcontext",3]],[["result",4],["box",3]]]],[11,"with_denylist","","Set rules to exclude in evaluation.",5,[[]]],[11,"always_flatten","","Whether expressions should always be flattened during…",5,[[]]],[11,"lint","","Sets whether \\\"lint\\\"-like diagnostics should be emitted.",5,[[]]],[0,"diagnostics","","libslide\'s diagnostic module.",null,null],[3,"AssociatedDiagnostic","libslide::diagnostics","A secondary diagnostic associated with a primary…",null,null],[12,"kind","","The diagnostic kind.",6,null],[12,"span","","Source location for which the diagnostic is applicable.",6,null],[12,"msg","","Diagnostic message.",6,null],[3,"Diagnostic","","A diagnostic for slide source code.",null,null],[12,"kind","","The diagnostic kind.",7,null],[12,"code","","The diagnostic code.",7,null],[12,"span","","Source location for which the diagnostic is applicable.",7,null],[12,"title","","A summarizing title for the diagnostic.",7,null],[12,"msg","","Diagnostic message.",7,null],[12,"associated_diagnostics","","Any additional diagnostics associated with this one. The…",7,null],[12,"unspanned_associated_diagnostics","","Any additional diagnostics associated with this one, not…",7,null],[4,"DiagnosticKind","","The kind of a slide diagnostic.",null,null],[13,"Error","","An error diagnostic. Generally, this diagnostic should be…",8,null],[13,"Warning","","A warning diagnostic describes something that is not a…",8,null],[13,"Note","","A note diagnostic is a generic annotation with no specific…",8,null],[13,"Help","","A help diagnostic should instruct the user how their code…",8,null],[8,"DiagnosticRecord","","Describes a code and detailed explanation for a diagnostic.",null,null],[18,"CODE","","Diagnostic code.",9,null],[18,"EXPLANATION","","Detailed diagnostic explanation.",9,null],[8,"DiagnosticRegistry","","Describes an individual registry of slide diagnostics.",null,null],[10,"codes_with_explanations","","Retrieves all diagnostic codes owned by this registry and…",10,[[],["vec",3]]],[11,"all_codes_with_explanations","","All diagnostic codes and their explanations.",7,[[],["hashmap",3]]],[0,"scanner","libslide","Tokenizes slide programs and produces lexing diagnostics.",null,null],[3,"ScanErrors","libslide::scanner","Diagnostic errors produced by the scanner.",null,null],[3,"ScanResult","","Describes the result of tokenizing a slide program.",null,null],[12,"tokens","","Tokens of the program.",11,null],[12,"diagnostics","","Lexing diagnostics encountered while scanning the program.",11,null],[5,"scan","","Scans and tokenizes a string-like slide program.",null,[[["into",8]],["scanresult",3]]],[0,"types","","Definitions of types used in the libslide scanner.",null,null],[3,"Token","libslide::scanner::types","Describes a token in a slide program.",null,null],[12,"ty","","The type of the token.",12,null],[12,"span","","The source span of the token.",12,null],[12,"full_span","","The full span of the token including its leading trivia.",12,null],[4,"TokenType","","The type of a Token.",null,null],[13,"Float","","Stores a scanned number in double precision.",13,null],[13,"Plus","","",13,null],[13,"Minus","","",13,null],[13,"Mult","","",13,null],[13,"Div","","/ symbol",13,null],[13,"Mod","","% symbol",13,null],[13,"Exp","","^ symbol",13,null],[13,"Equal","","= symbol",13,null],[13,"AssignDefine","",":= symbol",13,null],[13,"OpenParen","","( symbol",13,null],[13,"CloseParen","",") symbol",13,null],[13,"OpenBracket","","[ symbol",13,null],[13,"CloseBracket","","] symbol",13,null],[13,"Variable","","A variable name.",13,null],[13,"VariablePattern","","A variable pattern, of form $name.",13,null],[13,"ConstPattern","","A constant pattern, of form #name.",13,null],[13,"AnyPattern","","An any pattern, of form _name.",13,null],[13,"Invalid","","An invalid token.",13,null],[13,"EOF","","End of file.",13,null],[11,"new","","Creates a new token.",12,[[["tokentype",4]]]],[11,"new","libslide","Creates a new Poly from a vector of coefficients, with the…",1,[[["vec",3]]]],[11,"empty","","Creates an empty Poly.",1,[[]]],[11,"is_zero","","Returns whether the polynomial is equivalent to 0.",1,[[]]],[11,"is_one","","Returns whether the polynomial is equivalent to 1.",1,[[]]],[11,"deg","","Returns the degree of the polynomial.",1,[[]]],[11,"primitive","","Returns the [primitive polynomial] of `self` over the…",1,[[]]],[11,"mul_scalar","","Multiplies each term in the polynomial by a scalar.",1,[[]]],[11,"div_scalar","","Divides each term in the polynomial by a scalar. If the…",1,[[],["result",4]]],[11,"div","","Divides one polynomial by another, returning a tuple of…",1,[[["poly",3]],["result",4]]],[11,"max_norm","","Returns the max norm of a polynomial. This is equivalent…",1,[[]]],[11,"lc","","Returns the leading coefficient, i.e. the coefficient of…",1,[[]]],[11,"eval","","Evaluates the polynomial at a value `x`.",1,[[]]],[11,"from_expr","","Transforms an expression into a polynomial relative to…",1,[[["rcexpr",3],["option",4]],[["result",4],["string",3]]]],[11,"to_expr","","Converts a Poly polynomial, relative to some term, into an…",1,[[["rcexpr",3],["span",3]],["rcexpr",3]]],[11,"to_string","","Prints the Poly as a polynomial string.",1,[[],["string",3]]],[18,"FRAC","","Emit divisions as fractions. Applies to LaTeX emit.",14,null],[18,"IMPLICIT_MULT","","Emits multiplications implicitly where possible. For…",14,null],[18,"TIMES","","Emits multiplication signs as \\\"\\\\times\\\". Applies to LaTeX…",14,null],[18,"DIV","","Emits divisions as \\\"\\\\div\\\". Applies to LaTeX emit.",14,null],[11,"empty","","Returns an empty set of flags",14,[[],["emitconfig",3]]],[11,"all","","Returns the set containing all flags.",14,[[],["emitconfig",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",14,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",14,[[],[["emitconfig",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",14,[[],["emitconfig",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",14,[[],["emitconfig",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",14,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",14,[[["emitconfig",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",14,[[["emitconfig",3]]]],[11,"insert","","Inserts the specified flags in-place.",14,[[["emitconfig",3]]]],[11,"remove","","Removes the specified flags in-place.",14,[[["emitconfig",3]]]],[11,"toggle","","Toggles the specified flags in-place.",14,[[["emitconfig",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",14,[[["emitconfig",3]]]],[8,"Grammar","","Describes a top-level item in the libslide grammar.",null,null],[8,"Emit","","Implements the emission of a type in an EmitFormat.",null,null],[11,"emit","","Emit `self` with the given EmitFormat.",15,[[["emitformat",4],["emitconfig",3]],["string",3]]],[10,"emit_pretty","","Emit `self` with the pretty emit format",15,[[["emitconfig",3]],["string",3]]],[11,"emit_debug","","Emit `self` with the debug emit format",15,[[["emitconfig",3]],["string",3]]],[10,"emit_s_expression","","Emit `self` with the s_expression emit format",15,[[["emitconfig",3]],["string",3]]],[10,"emit_latex","","Emit `self` with the LaTeX emit format",15,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","Same as emit_latex, but wraps the latex code in inline…",15,[[["emitconfig",3]],["string",3]]],[14,"intern_str","","Interns a string.",null,null],[14,"rc_expr","","Interns an expression.",null,null],[14,"rc_expr_pat","","Interns an expression.",null,null],[14,"poly","","Creates a new Poly.",null,null],[14,"parse_stmt","","Parses a statement.",null,null],[14,"parse_expr","","Parses an expression.",null,null],[14,"parse_asgn","","Parses an assignment.",null,null],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","libslide::diagnostics","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","libslide::scanner","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","libslide::scanner::types","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"codes_with_explanations","libslide::scanner","",17,[[],["vec",3]]],[11,"emit_pretty","libslide","",16,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",16,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",16,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","",16,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",3,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",3,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",3,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",2,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",2,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",2,[[["emitconfig",3]],["string",3]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[["range",3]]]],[11,"from","","",1,[[["vec",3]],["poly",3]]],[11,"from","","",1,[[["vec",3]],["poly",3]]],[11,"from","","",4,[[["string",3]]]],[11,"from","","",14,[[["vec",3],["string",3]]]],[11,"extend","","",14,[[["intoiterator",8]]]],[11,"into_iter","","",16,[[]]],[11,"clone","","",2,[[],["exprpat",4]]],[11,"clone","","",16,[[],["stmtlist",3]]],[11,"clone","","",3,[[],["stmt",4]]],[11,"clone","","",0,[[],["span",3]]],[11,"clone","libslide::scanner::types","",13,[[],["tokentype",4]]],[11,"clone","","",12,[[],["token",3]]],[11,"clone","libslide","",1,[[],["poly",3]]],[11,"clone","","",4,[[],["emitformat",4]]],[11,"clone","","",14,[[],["emitconfig",3]]],[11,"default","","",5,[[]]],[11,"default","","",1,[[],["poly",3]]],[11,"default","","",14,[[],["emitconfig",3]]],[11,"cmp","","",2,[[],["ordering",4]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"cmp","","",14,[[["emitconfig",3]],["ordering",4]]],[11,"eq","","",2,[[["exprpat",4]]]],[11,"eq","","",0,[[["span",3]]]],[11,"ne","","",0,[[["span",3]]]],[11,"eq","libslide::scanner::types","",13,[[["tokentype",4]]]],[11,"ne","","",13,[[["tokentype",4]]]],[11,"eq","","",12,[[["token",3]]]],[11,"ne","","",12,[[["token",3]]]],[11,"eq","libslide","",1,[[["poly",3]]]],[11,"ne","","",1,[[["poly",3]]]],[11,"eq","","",14,[[["emitconfig",3]]]],[11,"ne","","",14,[[["emitconfig",3]]]],[11,"partial_cmp","","",2,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",0,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",14,[[["emitconfig",3]],[["ordering",4],["option",4]]]],[11,"lt","","",14,[[["emitconfig",3]]]],[11,"le","","",14,[[["emitconfig",3]]]],[11,"gt","","",14,[[["emitconfig",3]]]],[11,"ge","","",14,[[["emitconfig",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",14,[[["emitconfig",3]],["emitconfig",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",14,[[["emitconfig",3]]]],[11,"not","","Returns the complement of this set of flags.",14,[[],["emitconfig",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",14,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitor","","Returns the union of the two sets of flags.",14,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",14,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",14,[[["emitconfig",3]]]],[11,"bitor_assign","","Adds the set of flags.",14,[[["emitconfig",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",14,[[["emitconfig",3]]]],[11,"hash","","",2,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",14,[[]]],[11,"from_iter","","",14,[[["intoiterator",8]],["emitconfig",3]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"emit","","Emit `self` with the given EmitFormat.",15,[[["emitformat",4],["emitconfig",3]],["string",3]]],[11,"emit_debug","","Emit `self` with the debug emit format",15,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","Same as emit_latex, but wraps the latex code in inline…",15,[[["emitconfig",3]],["string",3]]]],"p":[[3,"Span"],[3,"Poly"],[4,"ExprPat"],[4,"Stmt"],[4,"EmitFormat"],[3,"ProgramContext"],[3,"AssociatedDiagnostic"],[3,"Diagnostic"],[4,"DiagnosticKind"],[8,"DiagnosticRecord"],[8,"DiagnosticRegistry"],[3,"ScanResult"],[3,"Token"],[4,"TokenType"],[3,"EmitConfig"],[8,"Emit"],[3,"StmtList"],[3,"ScanErrors"]]},\
"slide":{"doc":"The slide app. For an overview of slide\'s design, see…","i":[[3,"Opts","slide","Options to run slide with.",null,null],[12,"program","","Slide program.",0,null],[12,"emit_format","","How the result of slide\'s execution should be emitted.",0,null],[12,"emit_config","","Configuration options for slide emit.",0,null],[12,"lint","","When true, lint warnings for the program will be emitted,…",0,null],[12,"parse_only","","When true, slide will stop after parsing a program.",0,null],[12,"expr_pat","","When true, slide will expect the program to be an…",0,null],[12,"explain_diagnostic","","When is Some diagnostic code, will explain that code.",0,null],[12,"color","","When true, slide emit will be colored.",0,null],[3,"SlideResult","","Output of a slide execution.",null,null],[12,"code","","Exit code",1,null],[12,"stdout","","Emit for stdout",1,null],[12,"stderr","","Emit for stderr",1,null],[12,"page","","Whether the stdout should be emit as paged",1,null],[5,"get_opts","","Parses Opts from the command line or given a parser that…",null,[[],[["error",3],["result",4],["opts",3]]]],[5,"run_slide","","Runs slide end-to-end.",null,[[["opts",3]],["slideresult",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"default","","",1,[[],["slideresult",3]]]],"p":[[3,"Opts"],[3,"SlideResult"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);