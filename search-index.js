var searchIndex = JSON.parse('{\
"libslide":{"doc":"libslide is the core of slide, implementing the end-to-end…","i":[[3,"Assignment","libslide","An assignment.",null,null],[12,"lhs","","Left hand side of the assignment.",0,null],[12,"asgn_op","","The assignment operator.",0,null],[12,"rhs","","Right hand side of the assignment.",0,null],[12,"span","","Span of the entire assignment.",0,null],[3,"RcExpr","","An reference-counted version of an expression.",null,null],[12,"span","","The original span of this expression from an input source…",1,null],[3,"Stmt","","A statement in a slide program.",null,null],[12,"kind","","The kind of the statement.",2,null],[3,"StmtList","","A list of statements in a slide program.",null,null],[3,"Span","","Describes the character span of a substring in a text.",null,null],[12,"lo","","Inclusive lower bound index of the span, in terms of…",3,null],[12,"hi","","Exclusive upper bound index of the span, in terms of…",3,null],[3,"ProgramContext","","A context for evaluating a slide program.",null,null],[3,"ParseResult","","Describes the result of parsing a slide program.",null,null],[12,"program","","The slide program.",4,null],[12,"diagnostics","","Parsing diagnostics encountered while scanning the program.",4,null],[3,"EvaluationResult","","Describes the result of a slide program evaluation.",null,null],[12,"simplified","","Input program statements, evaluated to as simple a form…",5,null],[12,"diagnostics","","Diagnostic",5,null],[3,"Poly","","A polynomial in integer space Z. TODO: Currently, this…",null,null],[12,"vec","","Underlying polynomial coefficient representation. The…",6,null],[3,"EmitConfig","","Configuration options for emitting a slide grammar.",null,null],[4,"Expr","","An expression.",null,null],[13,"Const","","A constant.",7,null],[13,"Var","","A variable.",7,null],[13,"BinaryExpr","","A binary expression.",7,null],[13,"UnaryExpr","","A unary expression.",7,null],[13,"Parend","","An expression wrapped in parentheses.",7,null],[13,"Bracketed","","An expression wrapped in brackets.",7,null],[4,"ExprPat","","A slide expression pattern.",null,null],[13,"Const","","A constant",8,null],[13,"VarPat","","Pattern matching a variable",8,null],[13,"ConstPat","","Pattern matching a constant",8,null],[13,"AnyPat","","Pattern matching any expression",8,null],[13,"BinaryExpr","","A binary expression",8,null],[13,"UnaryExpr","","A unary expression",8,null],[13,"Parend","","A paranthesized expression",8,null],[13,"Bracketed","","A bracketed expression",8,null],[4,"StmtKind","","The kind of a statement.",null,null],[13,"Expr","","An expression statement is a statement that consists…",9,null],[13,"Assignment","","An assignment binds some value to a variable. For example…",9,null],[4,"EmitFormat","","The format in which a slide grammar should be emitted.",null,null],[13,"Pretty","","Canonical, human-readable form. For example, `1+1` is…",10,null],[13,"SExpression","","S-expression form. For example, `1+1` is output as `(+ 1…",10,null],[13,"Latex","","LaTeX output form. For example, `(1 + 1)` is output as…",10,null],[13,"Debug","","Slide internal debug form. NB: this form is not stable,…",10,null],[5,"parse_expression_pattern","","Parses a tokenized slide expression pattern, emitting the…",null,[[["vec",3],["token",3]],[["rcexprpat",3],["parseresult",3]]]],[5,"parse_statements","","Parses a tokenized slide program, emitting the result and…",null,[[["vec",3],["token",3]],[["parseresult",3],["stmtlist",3]]]],[5,"lint_expr_pat","","Lints a slide expression pattern.",null,[[["rcexprpat",3]],[["diagnostic",3],["vec",3]]]],[5,"lint_stmt","","Lints a slide statement list.",null,[[["stmtlist",3]],[["diagnostic",3],["vec",3]]]],[5,"build_rules","","Given an evaluator context, builds a set of evaluator…",null,[[["programcontext",3]],[["buildruleerrors",3],["result",4],["vec",3]]]],[5,"evaluate","","Evaluates a list of statements to as simplified a form as…",null,[[["stmtlist",3],["programcontext",3]],[["box",3],["evaluationresult",3],["result",4]]]],[5,"evaluate_expr","","Evaluates an expression to as simplified a form as…",null,[[["rcexpr",3],["programcontext",3]],["rcexpr",3]]],[11,"new","","Creates a new `Stmt`.",2,[[["stmtkind",4]]]],[11,"update_with","","Update `self` with a fresh statement kind, given functions…",2,[[]]],[11,"vw","","Retrieve the number of vertical whitespace lines above…",2,[[]]],[11,"span","","Gets the span of the statement.",2,[[],["span",3]]],[11,"redefine_with","","Redefines `self` with a definition-evaluating function…",0,[[]]],[11,"get_const","","Gets the constant value stored in this expression, if any.",7,[[],["option",4]]],[11,"get_var","","Gets the variable value stored in this expression, if any.",7,[[],[["internedstr",3],["option",4]]]],[0,"collectors","","Module `collectors` provides utilities for collecting…",null,null],[5,"collect_var_names","libslide::collectors","Collects unique variable names in an expression.",null,[[["rcexpr",3]],[["internedstr",3],["hashset",3]]]],[5,"collect_var_asgns","","Collects variable assignments in a program.",null,[[["stmtlist",3]],[["vec",3],["internedstr",3],["hashmap",3]]]],[5,"collect_pat_names","","Collects unique pattern names in an pattern expression.",null,[[["rcexprpat",3]],["hashset",3]]],[0,"visit","libslide","Traits for visiting slide grammar trees.",null,null],[5,"descend_stmt_list","libslide::visit","Descends down a statement list.",null,[[["stmtlist",3]]]],[5,"descend_stmt","","Descends down a statement.",null,[[["stmt",3]]]],[5,"descend_stmt_kind","","Descends down a specific statement kind.",null,[[["stmtkind",4]]]],[5,"descend_asgn","","Descends down an assignment.",null,[[["assignment",3]]]],[5,"descend_expr","","Descends down an expression.",null,[[["rcexpr",3]]]],[5,"descend_binary","","Descends down a binary expression.",null,[[["span",3],["binaryexpr",3]]]],[5,"descend_unary","","Descends down a unary expression.",null,[[["span",3],["unaryexpr",3]]]],[5,"descend_parend","","Descends down a parenthesized expression.",null,[[["span",3],["rcexpr",3]]]],[5,"descend_bracketed","","Descends down a bracketed expression.",null,[[["span",3],["rcexpr",3]]]],[5,"descend_expr_pat","","Descends down an expression pattern.",null,[[["rcexprpat",3]]]],[5,"descend_binary_expr_pat","","Descends down a binary expression pattern.",null,[[["binaryexpr",3]]]],[5,"descend_unary_expr_pat","","Descends down a unary expression pattern.",null,[[["unaryexpr",3]]]],[5,"descend_parend_expr_pat","","Descends down a parenthesized expression pattern.",null,[[["span",3],["rcexprpat",3]]]],[5,"descend_bracketed_expr_pat","","Descends down a bracketed expression pattern.",null,[[["span",3],["rcexprpat",3]]]],[8,"StmtVisitor","","Describes a statement list visitor.",null,null],[11,"visit_stmt_list","","Visits a statement list.",11,[[["stmtlist",3]]]],[11,"visit_stmt","","Visits a statement.",11,[[["stmt",3]]]],[11,"visit_stmt_kind","","Visits a specific statement kind.",11,[[["stmtkind",4]]]],[11,"visit_asgn","","Visits an assignment.",11,[[["assignment",3]]]],[11,"visit_asgn_op","","Visits an assignment operator.",11,[[["assignmentop",4]]]],[11,"visit_expr","","Visits an expression.",11,[[["rcexpr",3]]]],[11,"visit_const","","Visits a constant.",11,[[["span",3]]]],[11,"visit_var","","Visits a variable.",11,[[["span",3],["internedstr",3]]]],[11,"visit_binary_op","","Visits a binary operator.",11,[[["binaryoperator",4]]]],[11,"visit_binary","","Visits a binary expression.",11,[[["span",3],["binaryexpr",3]]]],[11,"visit_unary_op","","Visits a unary operator.",11,[[["unaryoperator",4]]]],[11,"visit_unary","","Visits a unary expression.",11,[[["span",3],["unaryexpr",3]]]],[11,"visit_parend","","Visits a parenthesized expression.",11,[[["span",3],["rcexpr",3]]]],[11,"visit_bracketed","","Visits a bracketed expression.",11,[[["span",3],["rcexpr",3]]]],[8,"ExprPatVisitor","","Describes an expression pattern visitor.",null,null],[11,"visit_expr_pat","","Visits an expression pattern.",12,[[["rcexprpat",3]]]],[11,"visit_const","","Visits a constant.",12,[[]]],[11,"visit_var_pat","","Visits a variable pattern.",12,[[["span",3]]]],[11,"visit_const_pat","","Visits a constant pattern.",12,[[["span",3]]]],[11,"visit_any_pat","","Visits an any pattern.",12,[[["span",3]]]],[11,"visit_binary_op","","Visits a binary operator.",12,[[["binaryoperator",4]]]],[11,"visit_binary_expr_pat","","Visits a binary expression pattern.",12,[[["binaryexpr",3]]]],[11,"visit_unary_op","","Visits a unary operator.",12,[[["unaryoperator",4]]]],[11,"visit_unary_expr_pat","","Visits a unary expression pattern.",12,[[["unaryexpr",3]]]],[11,"visit_parend_expr_pat","","Visits a parenthesized expression pattern.",12,[[["span",3],["rcexprpat",3]]]],[11,"visit_bracketed_expr_pat","","Visits a bracketed expression pattern.",12,[[["span",3],["rcexprpat",3]]]],[11,"contains","libslide","Returns `true` iff the span contains `pos`.",3,[[]]],[11,"with_denylist","","Set rules to exclude in evaluation.",13,[[]]],[11,"always_flatten","","Whether expressions should always be flattened during…",13,[[]]],[11,"lint","","Sets whether \\\"lint\\\"-like diagnostics should be emitted.",13,[[]]],[0,"diagnostics","","libslide\'s diagnostic module.",null,null],[3,"AssociatedDiagnostic","libslide::diagnostics","A secondary diagnostic associated with a primary…",null,null],[12,"kind","","The diagnostic kind.",14,null],[12,"span","","Source location for which the diagnostic is applicable.",14,null],[12,"msg","","Diagnostic message.",14,null],[3,"Diagnostic","","A diagnostic for slide source code.",null,null],[12,"kind","","The diagnostic kind.",15,null],[12,"code","","The diagnostic code.",15,null],[12,"span","","Source location for which the diagnostic is applicable.",15,null],[12,"title","","A summarizing title for the diagnostic.",15,null],[12,"msg","","Diagnostic message.",15,null],[12,"associated_diagnostics","","Any additional diagnostics associated with this one. The…",15,null],[12,"unspanned_associated_diagnostics","","Any additional diagnostics associated with this one, not…",15,null],[4,"DiagnosticKind","","The kind of a slide diagnostic.",null,null],[13,"Error","","An error diagnostic. Generally, this diagnostic should be…",16,null],[13,"Warning","","A warning diagnostic describes something that is not a…",16,null],[13,"Note","","A note diagnostic is a generic annotation with no specific…",16,null],[13,"Help","","A help diagnostic should instruct the user how their code…",16,null],[8,"DiagnosticRecord","","Describes a code and detailed explanation for a diagnostic.",null,null],[18,"CODE","","Diagnostic code.",17,null],[18,"EXPLANATION","","Detailed diagnostic explanation.",17,null],[8,"DiagnosticRegistry","","Describes an individual registry of slide diagnostics.",null,null],[10,"codes_with_explanations","","Retrieves all diagnostic codes owned by this registry and…",18,[[],["vec",3]]],[11,"all_codes_with_explanations","","All diagnostic codes and their explanations.",15,[[],["hashmap",3]]],[0,"scanner","libslide","Tokenizes slide programs and produces lexing diagnostics.",null,null],[3,"ScanErrors","libslide::scanner","Diagnostic errors produced by the scanner.",null,null],[3,"ScanResult","","Describes the result of tokenizing a slide program.",null,null],[12,"tokens","","Tokens of the program.",19,null],[12,"diagnostics","","Lexing diagnostics encountered while scanning the program.",19,null],[5,"scan","","Scans and tokenizes a string-like slide program.",null,[[["into",8]],["scanresult",3]]],[0,"types","","Definitions of types used in the libslide scanner.",null,null],[3,"Token","libslide::scanner::types","Describes a token in a slide program.",null,null],[12,"ty","","The type of the token.",20,null],[12,"span","","The source span of the token.",20,null],[12,"full_span","","The full span of the token including its leading trivia.",20,null],[4,"TokenType","","The type of a Token.",null,null],[13,"Float","","Stores a scanned number in double precision.",21,null],[13,"Plus","","symbol",21,null],[13,"Minus","","symbol",21,null],[13,"Mult","","symbol",21,null],[13,"Div","","/ symbol",21,null],[13,"Mod","","% symbol",21,null],[13,"Exp","","^ symbol",21,null],[13,"Equal","","= symbol",21,null],[13,"AssignDefine","",":= symbol",21,null],[13,"OpenParen","","( symbol",21,null],[13,"CloseParen","",") symbol",21,null],[13,"OpenBracket","","[ symbol",21,null],[13,"CloseBracket","","] symbol",21,null],[13,"Variable","","A variable name.",21,null],[13,"VariablePattern","","A variable pattern, of form $name.",21,null],[13,"ConstPattern","","A constant pattern, of form #name.",21,null],[13,"AnyPattern","","An any pattern, of form _name.",21,null],[13,"Invalid","","An invalid token.",21,null],[13,"EOF","","End of file.",21,null],[11,"new","","Creates a new token.",20,[[["tokentype",4]]]],[11,"new","libslide","Creates a new Poly from a vector of coefficients, with the…",6,[[["vec",3]]]],[11,"empty","","Creates an empty Poly.",6,[[]]],[11,"is_zero","","Returns whether the polynomial is equivalent to 0.",6,[[]]],[11,"is_one","","Returns whether the polynomial is equivalent to 1.",6,[[]]],[11,"deg","","Returns the degree of the polynomial.",6,[[]]],[11,"primitive","","Returns the primitive polynomial of `self` over the…",6,[[]]],[11,"mul_scalar","","Multiplies each term in the polynomial by a scalar.",6,[[]]],[11,"div_scalar","","Divides each term in the polynomial by a scalar. If the…",6,[[],["result",4]]],[11,"div","","Divides one polynomial by another, returning a tuple of…",6,[[["poly",3]],["result",4]]],[11,"max_norm","","Returns the max norm of a polynomial. This is equivalent…",6,[[]]],[11,"lc","","Returns the leading coefficient, i.e. the coefficient of…",6,[[]]],[11,"eval","","Evaluates the polynomial at a value `x`.",6,[[]]],[11,"from_expr","","Transforms an expression into a polynomial relative to…",6,[[["rcexpr",3],["option",4]],[["result",4],["string",3]]]],[11,"to_expr","","Converts a Poly polynomial, relative to some term, into an…",6,[[["rcexpr",3],["span",3]],["rcexpr",3]]],[11,"to_string","","Prints the Poly as a polynomial string.",6,[[],["string",3]]],[18,"FRAC","","Emit divisions as fractions. Applies to LaTeX emit.",22,null],[18,"IMPLICIT_MULT","","Emits multiplications implicitly where possible. For…",22,null],[18,"TIMES","","Emits multiplication signs as \\\"\\\\times\\\". Applies to LaTeX…",22,null],[18,"DIV","","Emits divisions as \\\"\\\\div\\\". Applies to LaTeX emit.",22,null],[11,"empty","","Returns an empty set of flags",22,[[],["emitconfig",3]]],[11,"all","","Returns the set containing all flags.",22,[[],["emitconfig",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",22,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",22,[[],[["option",4],["emitconfig",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",22,[[],["emitconfig",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",22,[[],["emitconfig",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",22,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",22,[[["emitconfig",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",22,[[["emitconfig",3]]]],[11,"insert","","Inserts the specified flags in-place.",22,[[["emitconfig",3]]]],[11,"remove","","Removes the specified flags in-place.",22,[[["emitconfig",3]]]],[11,"toggle","","Toggles the specified flags in-place.",22,[[["emitconfig",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",22,[[["emitconfig",3]]]],[8,"Grammar","","Describes a top-level item in the libslide grammar.",null,null],[8,"Emit","","Implements the emission of a type in an EmitFormat.",null,null],[11,"emit","","Emit `self` with the given EmitFormat.",23,[[["emitformat",4],["emitconfig",3]],["string",3]]],[10,"emit_pretty","","Emit `self` with the pretty emit format",23,[[["emitconfig",3]],["string",3]]],[11,"emit_debug","","Emit `self` with the debug emit format",23,[[["emitconfig",3]],["string",3]]],[10,"emit_s_expression","","Emit `self` with the s_expression emit format",23,[[["emitconfig",3]],["string",3]]],[10,"emit_latex","","Emit `self` with the LaTeX emit format",23,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","Same as emit_latex, but wraps the latex code in inline…",23,[[["emitconfig",3]],["string",3]]],[14,"intern_str","","Interns a string.",null,null],[14,"rc_expr","","Interns an expression.",null,null],[14,"rc_expr_pat","","Interns an expression.",null,null],[14,"poly","","Creates a new Poly.",null,null],[14,"parse_stmt","","Parses a statement.",null,null],[14,"parse_expr","","Parses an expression.",null,null],[14,"parse_asgn","","Parses an assignment.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"into_iter","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","libslide::diagnostics","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","libslide::scanner","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","libslide::scanner::types","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"to_string","","",20,[[],["string",3]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"codes_with_explanations","libslide::scanner","",25,[[],["vec",3]]],[11,"emit_pretty","libslide","",1,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",1,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",1,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",24,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",24,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",24,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","",24,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",9,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",9,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",9,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",2,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",2,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",2,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",0,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",0,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",0,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",7,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",7,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",7,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",8,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",8,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",8,[[["emitconfig",3]],["string",3]]],[11,"as_ref","","",1,[[],["expr",4]]],[11,"from","","",9,[[["rcexpr",3]]]],[11,"from","","",9,[[["assignment",3]]]],[11,"from","","",7,[[]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[["range",3]]]],[11,"from","","",6,[[["vec",3]],["poly",3]]],[11,"from","","",6,[[["vec",3]],["poly",3]]],[11,"from","","",10,[[["string",3]]]],[11,"from","","",22,[[["vec",3],["string",3]]]],[11,"extend","","",22,[[["intoiterator",8]]]],[11,"into_iter","","",24,[[]]],[11,"clone","","",1,[[],["rcexpr",3]]],[11,"clone","","",8,[[],["exprpat",4]]],[11,"clone","","",24,[[],["stmtlist",3]]],[11,"clone","","",9,[[],["stmtkind",4]]],[11,"clone","","",2,[[],["stmt",3]]],[11,"clone","","",0,[[],["assignment",3]]],[11,"clone","","",7,[[],["expr",4]]],[11,"clone","","",3,[[],["span",3]]],[11,"clone","libslide::scanner::types","",21,[[],["tokentype",4]]],[11,"clone","","",20,[[],["token",3]]],[11,"clone","libslide","",6,[[],["poly",3]]],[11,"clone","","",10,[[],["emitformat",4]]],[11,"clone","","",22,[[],["emitconfig",3]]],[11,"default","","",13,[[]]],[11,"default","","",6,[[],["poly",3]]],[11,"default","","",22,[[],["emitconfig",3]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"cmp","","",8,[[],["ordering",4]]],[11,"cmp","","",7,[[],["ordering",4]]],[11,"cmp","","",3,[[],["ordering",4]]],[11,"cmp","","",22,[[["emitconfig",3]],["ordering",4]]],[11,"eq","","",1,[[]]],[11,"eq","","",8,[[["exprpat",4]]]],[11,"eq","","",7,[[["expr",4]]]],[11,"ne","","",7,[[["expr",4]]]],[11,"eq","","",3,[[["span",3]]]],[11,"ne","","",3,[[["span",3]]]],[11,"eq","libslide::diagnostics","",16,[[["diagnostickind",4]]]],[11,"eq","libslide::scanner::types","",21,[[["tokentype",4]]]],[11,"ne","","",21,[[["tokentype",4]]]],[11,"eq","","",20,[[["token",3]]]],[11,"ne","","",20,[[["token",3]]]],[11,"eq","libslide","",6,[[["poly",3]]]],[11,"ne","","",6,[[["poly",3]]]],[11,"eq","","",22,[[["emitconfig",3]]]],[11,"ne","","",22,[[["emitconfig",3]]]],[11,"partial_cmp","","",1,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",8,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",3,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",22,[[["emitconfig",3]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["emitconfig",3]]]],[11,"le","","",22,[[["emitconfig",3]]]],[11,"gt","","",22,[[["emitconfig",3]]]],[11,"ge","","",22,[[["emitconfig",3]]]],[11,"deref","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",22,[[["emitconfig",3]],["emitconfig",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",22,[[["emitconfig",3]]]],[11,"not","","Returns the complement of this set of flags.",22,[[],["emitconfig",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",22,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitor","","Returns the union of the two sets of flags.",22,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",22,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",22,[[["emitconfig",3]]]],[11,"bitor_assign","","Adds the set of flags.",22,[[["emitconfig",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",22,[[["emitconfig",3]]]],[11,"hash","","",1,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",22,[[]]],[11,"from_iter","","",22,[[["intoiterator",8]],["emitconfig",3]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"visit_stmt_list","libslide::visit","Visits a statement list.",11,[[["stmtlist",3]]]],[11,"visit_stmt","","Visits a statement.",11,[[["stmt",3]]]],[11,"visit_stmt_kind","","Visits a specific statement kind.",11,[[["stmtkind",4]]]],[11,"visit_asgn","","Visits an assignment.",11,[[["assignment",3]]]],[11,"visit_asgn_op","","Visits an assignment operator.",11,[[["assignmentop",4]]]],[11,"visit_expr","","Visits an expression.",11,[[["rcexpr",3]]]],[11,"visit_const","","Visits a constant.",11,[[["span",3]]]],[11,"visit_var","","Visits a variable.",11,[[["span",3],["internedstr",3]]]],[11,"visit_binary_op","","Visits a binary operator.",11,[[["binaryoperator",4]]]],[11,"visit_binary","","Visits a binary expression.",11,[[["span",3],["binaryexpr",3]]]],[11,"visit_unary_op","","Visits a unary operator.",11,[[["unaryoperator",4]]]],[11,"visit_unary","","Visits a unary expression.",11,[[["span",3],["unaryexpr",3]]]],[11,"visit_parend","","Visits a parenthesized expression.",11,[[["span",3],["rcexpr",3]]]],[11,"visit_bracketed","","Visits a bracketed expression.",11,[[["span",3],["rcexpr",3]]]],[11,"visit_expr_pat","","Visits an expression pattern.",12,[[["rcexprpat",3]]]],[11,"visit_const","","Visits a constant.",12,[[]]],[11,"visit_var_pat","","Visits a variable pattern.",12,[[["span",3]]]],[11,"visit_const_pat","","Visits a constant pattern.",12,[[["span",3]]]],[11,"visit_any_pat","","Visits an any pattern.",12,[[["span",3]]]],[11,"visit_binary_op","","Visits a binary operator.",12,[[["binaryoperator",4]]]],[11,"visit_binary_expr_pat","","Visits a binary expression pattern.",12,[[["binaryexpr",3]]]],[11,"visit_unary_op","","Visits a unary operator.",12,[[["unaryoperator",4]]]],[11,"visit_unary_expr_pat","","Visits a unary expression pattern.",12,[[["unaryexpr",3]]]],[11,"visit_parend_expr_pat","","Visits a parenthesized expression pattern.",12,[[["span",3],["rcexprpat",3]]]],[11,"visit_bracketed_expr_pat","","Visits a bracketed expression pattern.",12,[[["span",3],["rcexprpat",3]]]],[11,"emit","libslide","Emit `self` with the given EmitFormat.",23,[[["emitformat",4],["emitconfig",3]],["string",3]]],[11,"emit_debug","","Emit `self` with the debug emit format",23,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","Same as emit_latex, but wraps the latex code in inline…",23,[[["emitconfig",3]],["string",3]]]],"p":[[3,"Assignment"],[3,"RcExpr"],[3,"Stmt"],[3,"Span"],[3,"ParseResult"],[3,"EvaluationResult"],[3,"Poly"],[4,"Expr"],[4,"ExprPat"],[4,"StmtKind"],[4,"EmitFormat"],[8,"StmtVisitor"],[8,"ExprPatVisitor"],[3,"ProgramContext"],[3,"AssociatedDiagnostic"],[3,"Diagnostic"],[4,"DiagnosticKind"],[8,"DiagnosticRecord"],[8,"DiagnosticRegistry"],[3,"ScanResult"],[3,"Token"],[4,"TokenType"],[3,"EmitConfig"],[8,"Emit"],[3,"StmtList"],[3,"ScanErrors"]]},\
"slide":{"doc":"The slide app. For an overview of slide\'s design, see…","i":[[3,"Opts","slide","Options to run slide with.",null,null],[12,"program","","Slide program.",0,null],[12,"emit_format","","How the result of slide\'s execution should be emitted.",0,null],[12,"emit_config","","Configuration options for slide emit.",0,null],[12,"lint","","When true, lint warnings for the program will be emitted,…",0,null],[12,"parse_only","","When true, slide will stop after parsing a program.",0,null],[12,"expr_pat","","When true, slide will expect the program to be an…",0,null],[12,"explain_diagnostic","","When is Some diagnostic code, will explain that code.",0,null],[12,"color","","When true, slide emit will be colored.",0,null],[3,"SlideResult","","Output of a slide execution.",null,null],[12,"code","","Exit code",1,null],[12,"stdout","","Emit for stdout",1,null],[12,"stderr","","Emit for stderr",1,null],[12,"page","","Whether the stdout should be emit as paged",1,null],[5,"get_opts","","Parses Opts from the command line or given a parser that…",null,[[],[["result",4],["opts",3],["error",3]]]],[5,"run_slide","","Runs slide end-to-end.",null,[[["opts",3]],["slideresult",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"default","","",1,[[],["slideresult",3]]]],"p":[[3,"Opts"],[3,"SlideResult"]]},\
"slide_ls":{"doc":"Crate `slide_ls` implements a language server for slide.","i":[[3,"ProgramInfo","slide_ls","",null,null],[12,"source","","",0,null],[12,"original","","",0,null],[12,"simplified","","",0,null],[3,"SlideLS","","A slide language server.",null,null],[12,"client","","",1,null],[12,"document_registry","","",1,null],[12,"context","","",1,null],[5,"main","","",null,[[]]],[0,"services","","Provides langauge services for a slide language server.",null,null],[0,"hover","slide_ls::services","Provides hover services for a slide langauge server. See…",null,null],[3,"ExprFinder","slide_ls::services::hover","",null,null],[12,"tightest","","",2,null],[12,"pos","","",2,null],[5,"get_hover_info","","Returns hover info for an expression.",null,[[["position",3],["programcontext",3]],[["hover",3],["option",4]]]],[5,"fmt_asgn_definitions","","",null,[[],["string",3]]],[5,"fmt_hover_info","","",null,[[["string",3]],["string",3]]],[5,"get_tightest_expr","","",null,[[["stmtlist",3]],[["rcexpr",3],["option",4]]]],[0,"shims","slide_ls","Module `shims` converts between slide and LSP types.",null,null],[5,"convert_diagnostics","slide_ls::shims","",null,[[["url",3]],[["vec",3],["diagnostic",3]]]],[5,"flatten_diagnostic_msg","","",null,[[["diagnostic",3]],["string",3]]],[5,"flatten_related","","",null,[[["diagnostic",3],["url",3]],[["diagnosticrelatedinformation",3],["vec",3]]]],[5,"to_severity","","",null,[[["diagnostickind",4]],["diagnosticseverity",4]]],[5,"to_range","","",null,[[["span",3]],["range",3]]],[5,"to_position","","",null,[[],["position",3]]],[5,"to_offset","","",null,[[["position",3]]]],[6,"DocumentRegistry","slide_ls","",null,null],[11,"new","","Creates a new language server given a server client.",1,[[["client",3]]]],[11,"capabilities","","Returns capabilities of the language server.",1,[[],["servercapabilities",3]]],[11,"change","","",1,[[["option",4],["url",3],["string",3]]]],[11,"close","","",1,[[["url",3]]]],[11,"doc_registry","","",1,[[],[["refcell",3],["mutexguard",6]]]],[11,"get_program_info","","",1,[[["url",3]],[["programinfo",3],["mappedmutexguard",6]]]],[11,"context","","",1,[[],[["mappedmutexguard",6],["programcontext",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","slide_ls::services::hover","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"visit_stmt","","",2,[[["stmt",3]]]],[11,"visit_expr","","",2,[[["rcexpr",3]]]],[11,"initialize","slide_ls","",1,[[["initializeparams",3]],[["pin",3],["box",3]]]],[11,"initialized","","",1,[[["initializedparams",3]],[["box",3],["pin",3]]]],[11,"shutdown","","",1,[[],[["pin",3],["box",3]]]],[11,"did_open","","",1,[[["didopentextdocumentparams",3]],[["box",3],["pin",3]]]],[11,"did_change","","",1,[[["didchangetextdocumentparams",3]],[["box",3],["pin",3]]]],[11,"did_close","","",1,[[["didclosetextdocumentparams",3]],[["box",3],["pin",3]]]],[11,"hover","","",1,[[["hoverparams",3]],[["box",3],["pin",3]]]]],"p":[[3,"ProgramInfo"],[3,"SlideLS"],[3,"ExprFinder"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);