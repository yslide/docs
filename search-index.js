var searchIndex = JSON.parse('{\
"libslide":{"doc":"libslide is the core of slide, implementing the end-to-end…","i":[[3,"StmtList","libslide","A list of statements in a slide program.",null,null],[3,"Span","","Describes the character span of a substring in a text.",null,null],[12,"lo","","Inclusive lower bound index of the span, in terms of…",0,null],[12,"hi","","Exclusive upper bound index of the span, in terms of…",0,null],[3,"ProgramContext","","A context for evaluating a slide program.",null,null],[3,"EvaluationResult","","Describes the result of a slide program evaluation.",null,null],[12,"simplified","","Input program statements, evaluated to as simple a form…",1,null],[12,"diagnostics","","Diagnostic",1,null],[3,"Poly","","A polynomial in integer space Z. TODO: Currently, this…",null,null],[12,"vec","","Underlying polynomial coefficient representation. The…",2,null],[3,"EmitConfig","","Configuration options for emitting a slide grammar.",null,null],[4,"ExprPat","","A slide expression pattern.",null,null],[13,"Const","","A constant",3,null],[13,"VarPat","","Pattern matching a variable",3,null],[13,"ConstPat","","Pattern matching a constant",3,null],[13,"AnyPat","","Pattern matching any expression",3,null],[13,"BinaryExpr","","A binary expression",3,null],[13,"UnaryExpr","","A unary expression",3,null],[13,"Parend","","A paranthesized expression",3,null],[13,"Bracketed","","A bracketed expression",3,null],[4,"Stmt","","A statement in a slide program.",null,null],[13,"Expr","","An expression statement is a statement that consists…",4,null],[13,"Assignment","","An assignment binds some value to a variable. For example…",4,null],[4,"EmitFormat","","The format in which a slide grammar should be emitted.",null,null],[13,"Pretty","","Canonical, human-readable form. For example, `1+1` is…",5,null],[13,"SExpression","","S-expression form. For example, `1+1` is output as `(+ 1…",5,null],[13,"Latex","","LaTeX output form. For example, `(1 + 1)` is output as…",5,null],[13,"Debug","","Slide internal debug form. NB: this form is not stable,…",5,null],[5,"parse_expression_pattern","","Parses a tokenized slide expression pattern, emitting the…",null,[[["token",3],["vec",3]]]],[5,"parse_statement","","Parses a tokenized slide program, emitting the result and…",null,[[["token",3],["vec",3]]]],[5,"lint_expr_pat","","Lints a slide expression pattern.",null,[[["rcexprpat",3]],[["diagnostic",3],["vec",3]]]],[5,"lint_stmt","","Lints a slide statement list.",null,[[["stmtlist",3]],[["diagnostic",3],["vec",3]]]],[5,"evaluate","","Evaluates a list of statements to as simplified a form as…",null,[[["stmtlist",3],["programcontext",3]],[["result",4],["box",3],["evaluationresult",3]]]],[11,"with_denylist","","Set rules to exclude in evaluation.",6,[[]]],[11,"always_flatten","","Whether expressions should always be flattened during…",6,[[]]],[11,"lint","","Sets whether \\\"lint\\\"-like diagnostics should be emitted.",6,[[]]],[0,"diagnostics","","libslide\'s diagnostic module.",null,null],[3,"AssociatedDiagnostic","libslide::diagnostics","A secondary diagnostic associated with a primary…",null,null],[12,"kind","","The diagnostic kind.",7,null],[12,"span","","Source location for which the diagnostic is applicable.",7,null],[12,"msg","","Diagnostic message.",7,null],[3,"Diagnostic","","A diagnostic for slide source code.",null,null],[12,"kind","","The diagnostic kind.",8,null],[12,"code","","The diagnostic code.",8,null],[12,"span","","Source location for which the diagnostic is applicable.",8,null],[12,"title","","A summarizing title for the diagnostic.",8,null],[12,"msg","","Diagnostic message.",8,null],[12,"associated_diagnostics","","Any additional diagnostics associated with this one. The…",8,null],[12,"unspanned_associated_diagnostics","","Any additional diagnostics associated with this one, not…",8,null],[4,"DiagnosticKind","","The kind of a slide diagnostic.",null,null],[13,"Error","","An error diagnostic. Generally, this diagnostic should be…",9,null],[13,"Warning","","A warning diagnostic describes something that is not a…",9,null],[13,"Note","","A note diagnostic is a generic annotation with no specific…",9,null],[13,"Help","","A help diagnostic should instruct the user how their code…",9,null],[8,"DiagnosticRecord","","Describes a code and detailed explanation for a diagnostic.",null,null],[18,"CODE","","Diagnostic code.",10,null],[18,"EXPLANATION","","Detailed diagnostic explanation.",10,null],[8,"DiagnosticRegistry","","Describes an individual registry of slide diagnostics.",null,null],[10,"codes_with_explanations","","Retrieves all diagnostic codes owned by this registry and…",11,[[],["vec",3]]],[11,"all_codes_with_explanations","","All diagnostic codes and their explanations.",8,[[],["hashmap",3]]],[0,"scanner","libslide","Tokenizes slide programs and produces lexing diagnostics.",null,null],[3,"ScanErrors","libslide::scanner","Diagnostic errors produced by the scanner.",null,null],[3,"ScanResult","","Describes the result of tokenizing a slide program.",null,null],[12,"tokens","","Tokens of the program.",12,null],[12,"diagnostics","","Lexing diagnostics encountered while scanning the program.",12,null],[5,"scan","","Scans and tokenizes a string-like slide program.",null,[[["into",8]],["scanresult",3]]],[0,"types","","Definitions of types used in the libslide scanner.",null,null],[3,"Token","libslide::scanner::types","Describes a token in a slide program.",null,null],[12,"ty","","The type of the token.",13,null],[12,"span","","The source span of the token.",13,null],[12,"full_span","","The full span of the token including its leading trivia.",13,null],[4,"TokenType","","The type of a Token.",null,null],[13,"Float","","Stores a scanned number in double precision.",14,null],[13,"Plus","","symbol",14,null],[13,"Minus","","symbol",14,null],[13,"Mult","","symbol",14,null],[13,"Div","","/ symbol",14,null],[13,"Mod","","% symbol",14,null],[13,"Exp","","^ symbol",14,null],[13,"Equal","","= symbol",14,null],[13,"AssignDefine","",":= symbol",14,null],[13,"OpenParen","","( symbol",14,null],[13,"CloseParen","",") symbol",14,null],[13,"OpenBracket","","[ symbol",14,null],[13,"CloseBracket","","] symbol",14,null],[13,"Variable","","A variable name.",14,null],[13,"VariablePattern","","A variable pattern, of form $name.",14,null],[13,"ConstPattern","","A constant pattern, of form #name.",14,null],[13,"AnyPattern","","An any pattern, of form _name.",14,null],[13,"Invalid","","An invalid token.",14,null],[13,"EOF","","End of file.",14,null],[11,"new","","Creates a new token.",13,[[["tokentype",4]]]],[11,"new","libslide","Creates a new Poly from a vector of coefficients, with the…",2,[[["vec",3]]]],[11,"empty","","Creates an empty Poly.",2,[[]]],[11,"is_zero","","Returns whether the polynomial is equivalent to 0.",2,[[]]],[11,"is_one","","Returns whether the polynomial is equivalent to 1.",2,[[]]],[11,"deg","","Returns the degree of the polynomial.",2,[[]]],[11,"primitive","","Returns the primitive polynomial of `self` over the…",2,[[]]],[11,"mul_scalar","","Multiplies each term in the polynomial by a scalar.",2,[[]]],[11,"div_scalar","","Divides each term in the polynomial by a scalar. If the…",2,[[],["result",4]]],[11,"div","","Divides one polynomial by another, returning a tuple of…",2,[[["poly",3]],["result",4]]],[11,"max_norm","","Returns the max norm of a polynomial. This is equivalent…",2,[[]]],[11,"lc","","Returns the leading coefficient, i.e. the coefficient of…",2,[[]]],[11,"eval","","Evaluates the polynomial at a value `x`.",2,[[]]],[11,"from_expr","","Transforms an expression into a polynomial relative to…",2,[[["option",4],["rcexpr",3]],[["result",4],["string",3]]]],[11,"to_expr","","Converts a Poly polynomial, relative to some term, into an…",2,[[["rcexpr",3],["span",3]],["rcexpr",3]]],[11,"to_string","","Prints the Poly as a polynomial string.",2,[[],["string",3]]],[18,"FRAC","","Emit divisions as fractions. Applies to LaTeX emit.",15,null],[18,"IMPLICIT_MULT","","Emits multiplications implicitly where possible. For…",15,null],[18,"TIMES","","Emits multiplication signs as \\\"\\\\times\\\". Applies to LaTeX…",15,null],[18,"DIV","","Emits divisions as \\\"\\\\div\\\". Applies to LaTeX emit.",15,null],[11,"empty","","Returns an empty set of flags",15,[[],["emitconfig",3]]],[11,"all","","Returns the set containing all flags.",15,[[],["emitconfig",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",15,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",15,[[],[["option",4],["emitconfig",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",15,[[],["emitconfig",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",15,[[],["emitconfig",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",15,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",15,[[["emitconfig",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",15,[[["emitconfig",3]]]],[11,"insert","","Inserts the specified flags in-place.",15,[[["emitconfig",3]]]],[11,"remove","","Removes the specified flags in-place.",15,[[["emitconfig",3]]]],[11,"toggle","","Toggles the specified flags in-place.",15,[[["emitconfig",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",15,[[["emitconfig",3]]]],[8,"Grammar","","Describes a top-level item in the libslide grammar.",null,null],[8,"Emit","","Implements the emission of a type in an EmitFormat.",null,null],[11,"emit","","Emit `self` with the given EmitFormat.",16,[[["emitformat",4],["emitconfig",3]],["string",3]]],[10,"emit_pretty","","Emit `self` with the pretty emit format",16,[[["emitconfig",3]],["string",3]]],[11,"emit_debug","","Emit `self` with the debug emit format",16,[[["emitconfig",3]],["string",3]]],[10,"emit_s_expression","","Emit `self` with the s_expression emit format",16,[[["emitconfig",3]],["string",3]]],[10,"emit_latex","","Emit `self` with the LaTeX emit format",16,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","Same as emit_latex, but wraps the latex code in inline…",16,[[["emitconfig",3]],["string",3]]],[14,"intern_str","","Interns a string.",null,null],[14,"rc_expr","","Interns an expression.",null,null],[14,"rc_expr_pat","","Interns an expression.",null,null],[14,"poly","","Creates a new Poly.",null,null],[14,"parse_stmt","","Parses a statement.",null,null],[14,"parse_expr","","Parses an expression.",null,null],[14,"parse_asgn","","Parses an assignment.",null,null],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","libslide::diagnostics","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","libslide::scanner","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","libslide::scanner::types","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"codes_with_explanations","libslide::scanner","",18,[[],["vec",3]]],[11,"emit_pretty","libslide","",17,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",17,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",17,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","",17,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",4,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",4,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",4,[[["emitconfig",3]],["string",3]]],[11,"emit_pretty","","",3,[[["emitconfig",3]],["string",3]]],[11,"emit_s_expression","","",3,[[["emitconfig",3]],["string",3]]],[11,"emit_latex","","",3,[[["emitconfig",3]],["string",3]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[["range",3]]]],[11,"from","","",2,[[["vec",3]],["poly",3]]],[11,"from","","",2,[[["vec",3]],["poly",3]]],[11,"from","","",5,[[["string",3]]]],[11,"from","","",15,[[["vec",3],["string",3]]]],[11,"extend","","",15,[[["intoiterator",8]]]],[11,"into_iter","","",17,[[]]],[11,"clone","","",3,[[],["exprpat",4]]],[11,"clone","","",17,[[],["stmtlist",3]]],[11,"clone","","",4,[[],["stmt",4]]],[11,"clone","","",0,[[],["span",3]]],[11,"clone","libslide::scanner::types","",14,[[],["tokentype",4]]],[11,"clone","","",13,[[],["token",3]]],[11,"clone","libslide","",2,[[],["poly",3]]],[11,"clone","","",5,[[],["emitformat",4]]],[11,"clone","","",15,[[],["emitconfig",3]]],[11,"default","","",6,[[]]],[11,"default","","",2,[[],["poly",3]]],[11,"default","","",15,[[],["emitconfig",3]]],[11,"cmp","","",3,[[],["ordering",4]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"cmp","","",15,[[["emitconfig",3]],["ordering",4]]],[11,"eq","","",3,[[["exprpat",4]]]],[11,"eq","","",0,[[["span",3]]]],[11,"ne","","",0,[[["span",3]]]],[11,"eq","libslide::diagnostics","",9,[[["diagnostickind",4]]]],[11,"eq","libslide::scanner::types","",14,[[["tokentype",4]]]],[11,"ne","","",14,[[["tokentype",4]]]],[11,"eq","","",13,[[["token",3]]]],[11,"ne","","",13,[[["token",3]]]],[11,"eq","libslide","",2,[[["poly",3]]]],[11,"ne","","",2,[[["poly",3]]]],[11,"eq","","",15,[[["emitconfig",3]]]],[11,"ne","","",15,[[["emitconfig",3]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",15,[[["emitconfig",3]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["emitconfig",3]]]],[11,"le","","",15,[[["emitconfig",3]]]],[11,"gt","","",15,[[["emitconfig",3]]]],[11,"ge","","",15,[[["emitconfig",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",15,[[["emitconfig",3]],["emitconfig",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",15,[[["emitconfig",3]]]],[11,"not","","Returns the complement of this set of flags.",15,[[],["emitconfig",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",15,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitor","","Returns the union of the two sets of flags.",15,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",15,[[["emitconfig",3]],["emitconfig",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",15,[[["emitconfig",3]]]],[11,"bitor_assign","","Adds the set of flags.",15,[[["emitconfig",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",15,[[["emitconfig",3]]]],[11,"hash","","",3,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",15,[[]]],[11,"from_iter","","",15,[[["intoiterator",8]],["emitconfig",3]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"emit","","Emit `self` with the given EmitFormat.",16,[[["emitformat",4],["emitconfig",3]],["string",3]]],[11,"emit_debug","","Emit `self` with the debug emit format",16,[[["emitconfig",3]],["string",3]]],[11,"emit_wrapped_latex","","Same as emit_latex, but wraps the latex code in inline…",16,[[["emitconfig",3]],["string",3]]]],"p":[[3,"Span"],[3,"EvaluationResult"],[3,"Poly"],[4,"ExprPat"],[4,"Stmt"],[4,"EmitFormat"],[3,"ProgramContext"],[3,"AssociatedDiagnostic"],[3,"Diagnostic"],[4,"DiagnosticKind"],[8,"DiagnosticRecord"],[8,"DiagnosticRegistry"],[3,"ScanResult"],[3,"Token"],[4,"TokenType"],[3,"EmitConfig"],[8,"Emit"],[3,"StmtList"],[3,"ScanErrors"]]},\
"slide":{"doc":"The slide app. For an overview of slide\'s design, see…","i":[[3,"Opts","slide","Options to run slide with.",null,null],[12,"program","","Slide program.",0,null],[12,"emit_format","","How the result of slide\'s execution should be emitted.",0,null],[12,"emit_config","","Configuration options for slide emit.",0,null],[12,"lint","","When true, lint warnings for the program will be emitted,…",0,null],[12,"parse_only","","When true, slide will stop after parsing a program.",0,null],[12,"expr_pat","","When true, slide will expect the program to be an…",0,null],[12,"explain_diagnostic","","When is Some diagnostic code, will explain that code.",0,null],[12,"color","","When true, slide emit will be colored.",0,null],[3,"SlideResult","","Output of a slide execution.",null,null],[12,"code","","Exit code",1,null],[12,"stdout","","Emit for stdout",1,null],[12,"stderr","","Emit for stderr",1,null],[12,"page","","Whether the stdout should be emit as paged",1,null],[5,"get_opts","","Parses Opts from the command line or given a parser that…",null,[[],[["opts",3],["error",3],["result",4]]]],[5,"run_slide","","Runs slide end-to-end.",null,[[["opts",3]],["slideresult",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"default","","",1,[[],["slideresult",3]]]],"p":[[3,"Opts"],[3,"SlideResult"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);