(function() {var implementors = {};
implementors["libslide"] = [{"text":"impl !RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StmtList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EvaluationResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poly","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprPat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StmtKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssociatedDiagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenType","synthetic":true,"types":[]}];
implementors["slide"] = [{"text":"impl RefUnwindSafe for Opts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlideResult","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()